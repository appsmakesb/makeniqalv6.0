// Generated by view binder compiler. Do not edit!
package com.v5foradnroid.userapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.balysv.materialripple.MaterialRippleLayout;
import com.v5foradnroid.userapp.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemHistoryBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final MaterialRippleLayout lytParent;

  @NonNull
  public final TextView txtOrderDate;

  @NonNull
  public final TextView txtOrderTotal;

  @NonNull
  public final TextView txtPurchaseCode;

  private ItemHistoryBinding(@NonNull RelativeLayout rootView,
      @NonNull MaterialRippleLayout lytParent, @NonNull TextView txtOrderDate,
      @NonNull TextView txtOrderTotal, @NonNull TextView txtPurchaseCode) {
    this.rootView = rootView;
    this.lytParent = lytParent;
    this.txtOrderDate = txtOrderDate;
    this.txtOrderTotal = txtOrderTotal;
    this.txtPurchaseCode = txtPurchaseCode;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemHistoryBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_history, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemHistoryBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.lyt_parent;
      MaterialRippleLayout lytParent = ViewBindings.findChildViewById(rootView, id);
      if (lytParent == null) {
        break missingId;
      }

      id = R.id.txt_order_date;
      TextView txtOrderDate = ViewBindings.findChildViewById(rootView, id);
      if (txtOrderDate == null) {
        break missingId;
      }

      id = R.id.txt_order_total;
      TextView txtOrderTotal = ViewBindings.findChildViewById(rootView, id);
      if (txtOrderTotal == null) {
        break missingId;
      }

      id = R.id.txt_purchase_code;
      TextView txtPurchaseCode = ViewBindings.findChildViewById(rootView, id);
      if (txtPurchaseCode == null) {
        break missingId;
      }

      return new ItemHistoryBinding((RelativeLayout) rootView, lytParent, txtOrderDate,
          txtOrderTotal, txtPurchaseCode);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
